{"ast":null,"code":"import { csrfFetch } from \"./csrf\";\n\n/* ------------------------------- Action Types --------------------------- */\n\nconst LOAD_ALL_RESTAURANTS = '/restaurants/LOAD_ALL_RESTAURANTS';\nconst LOAD_ONE_RESTAURANT = '/restaurants/LOAD_ONE_RESTAURANT';\n\n/* ------------------------------ Action Creators -------------------------- */\n\nconst loadAllRestaurants = restaurants => {\n  return {\n    type: LOAD_ALL_RESTAURANTS,\n    restaurants: restaurants\n  };\n};\nconst loadOneRestaurant = restaurant => {\n  return {\n    type: LOAD_ONE_RESTAURANT,\n    restaurant: restaurant\n  };\n};\n\n/* ---------------------------- Thunk Action Creators ----------------------- */\n\nexport const getAllRestaurants = () => async dispatch => {\n  const response = await csrfFetch('/api/restaurants');\n  if (response.ok) {\n    const restaurants = await response.json();\n    dispatch(loadAllRestaurants(restaurants));\n    return restaurants;\n  }\n};\nexport const getOneRestaurant = restaurantId => async dispatch => {\n  const response = await csrfFetch(`/api/restaurants/${restaurantId}`);\n  if (response.ok) {\n    const restaurant = await response.json();\n    dispatch(loadOneRestaurant(restaurant));\n    return restaurant;\n  }\n};\n\n/* ---------------------------------- Reducer -------------------------------- */\n\nconst initialState = {};\nconst restaurantsReducer = (state = initialState, action) => {\n  let newState = {};\n  switch (action.type) {\n    case LOAD_ALL_RESTAURANTS:\n      let newRestaurants = {};\n      action.restaurants.Restaurants.forEach(restaurant => {\n        newRestaurants[restaurant.id] = restaurant;\n      });\n      newState = {\n        ...state,\n        ...newRestaurants\n      };\n      return newState;\n    case LOAD_ONE_RESTAURANT:\n      let newRestaurant = {};\n      newRestaurant[action.restaurant.id] = action.restaurant;\n      newState = {\n        ...state,\n        ...newRestaurant\n      };\n      return newState;\n    default:\n      return state;\n  }\n};\nexport default restaurantsReducer;","map":{"version":3,"names":["csrfFetch","LOAD_ALL_RESTAURANTS","LOAD_ONE_RESTAURANT","loadAllRestaurants","restaurants","type","loadOneRestaurant","restaurant","getAllRestaurants","dispatch","response","ok","json","getOneRestaurant","restaurantId","initialState","restaurantsReducer","state","action","newState","newRestaurants","Restaurants","forEach","id","newRestaurant"],"sources":["/Users/akshashe/Documents/Projects/team-project-2024849-sprinters/front-end/src/store/restaurants.js"],"sourcesContent":["import { csrfFetch } from \"./csrf\";\n\n\n/* ------------------------------- Action Types --------------------------- */\n\nconst LOAD_ALL_RESTAURANTS = '/restaurants/LOAD_ALL_RESTAURANTS'\nconst LOAD_ONE_RESTAURANT = '/restaurants/LOAD_ONE_RESTAURANT'\n\n\n/* ------------------------------ Action Creators -------------------------- */\n\nconst loadAllRestaurants = (restaurants) => {\n    return {\n        type: LOAD_ALL_RESTAURANTS,\n        restaurants: restaurants\n    }\n}\n\nconst loadOneRestaurant = (restaurant) => {\n    return {\n        type: LOAD_ONE_RESTAURANT,\n        restaurant: restaurant\n    }\n}\n\n\n/* ---------------------------- Thunk Action Creators ----------------------- */\n\nexport const getAllRestaurants = () => async (dispatch) => {\n    const response = await csrfFetch('/api/restaurants');\n    \n    if (response.ok) {\n        const restaurants = await response.json();\n        dispatch(loadAllRestaurants(restaurants));\n        return restaurants\n    }\n    \n}\n\nexport const getOneRestaurant = (restaurantId) => async (dispatch) => {\n    const response = await csrfFetch(`/api/restaurants/${restaurantId}`);\n    \n    if (response.ok) {\n        const restaurant = await response.json();\n        dispatch(loadOneRestaurant(restaurant))\n        return restaurant;\n    }\n}\n\n\n/* ---------------------------------- Reducer -------------------------------- */\n\nconst initialState = {};\n\nconst restaurantsReducer = (state = initialState, action) => {\n    let newState = {};\n    switch (action.type) {\n        \n        case LOAD_ALL_RESTAURANTS:\n            let newRestaurants = {};\n            action.restaurants.Restaurants.forEach(restaurant => {\n                newRestaurants[restaurant.id] = restaurant\n            })\n            newState = { ...state, ...newRestaurants };\n            return newState\n            \n            case LOAD_ONE_RESTAURANT:\n                let newRestaurant = {};\n                newRestaurant[action.restaurant.id] = action.restaurant\n                newState = { ...state, ...newRestaurant }\n            return newState\n\n        default:\n            return state;\n    }\n}\n\n\n\nexport default restaurantsReducer"],"mappings":"AAAA,SAASA,SAAS,QAAQ,QAAQ;;AAGlC;;AAEA,MAAMC,oBAAoB,GAAG,mCAAmC;AAChE,MAAMC,mBAAmB,GAAG,kCAAkC;;AAG9D;;AAEA,MAAMC,kBAAkB,GAAIC,WAAW,IAAK;EACxC,OAAO;IACHC,IAAI,EAAEJ,oBAAoB;IAC1BG,WAAW,EAAEA;EACjB,CAAC;AACL,CAAC;AAED,MAAME,iBAAiB,GAAIC,UAAU,IAAK;EACtC,OAAO;IACHF,IAAI,EAAEH,mBAAmB;IACzBK,UAAU,EAAEA;EAChB,CAAC;AACL,CAAC;;AAGD;;AAEA,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EACvD,MAAMC,QAAQ,GAAG,MAAMV,SAAS,CAAC,kBAAkB,CAAC;EAEpD,IAAIU,QAAQ,CAACC,EAAE,EAAE;IACb,MAAMP,WAAW,GAAG,MAAMM,QAAQ,CAACE,IAAI,CAAC,CAAC;IACzCH,QAAQ,CAACN,kBAAkB,CAACC,WAAW,CAAC,CAAC;IACzC,OAAOA,WAAW;EACtB;AAEJ,CAAC;AAED,OAAO,MAAMS,gBAAgB,GAAIC,YAAY,IAAK,MAAOL,QAAQ,IAAK;EAClE,MAAMC,QAAQ,GAAG,MAAMV,SAAS,CAAC,oBAAoBc,YAAY,EAAE,CAAC;EAEpE,IAAIJ,QAAQ,CAACC,EAAE,EAAE;IACb,MAAMJ,UAAU,GAAG,MAAMG,QAAQ,CAACE,IAAI,CAAC,CAAC;IACxCH,QAAQ,CAACH,iBAAiB,CAACC,UAAU,CAAC,CAAC;IACvC,OAAOA,UAAU;EACrB;AACJ,CAAC;;AAGD;;AAEA,MAAMQ,YAAY,GAAG,CAAC,CAAC;AAEvB,MAAMC,kBAAkB,GAAGA,CAACC,KAAK,GAAGF,YAAY,EAAEG,MAAM,KAAK;EACzD,IAAIC,QAAQ,GAAG,CAAC,CAAC;EACjB,QAAQD,MAAM,CAACb,IAAI;IAEf,KAAKJ,oBAAoB;MACrB,IAAImB,cAAc,GAAG,CAAC,CAAC;MACvBF,MAAM,CAACd,WAAW,CAACiB,WAAW,CAACC,OAAO,CAACf,UAAU,IAAI;QACjDa,cAAc,CAACb,UAAU,CAACgB,EAAE,CAAC,GAAGhB,UAAU;MAC9C,CAAC,CAAC;MACFY,QAAQ,GAAG;QAAE,GAAGF,KAAK;QAAE,GAAGG;MAAe,CAAC;MAC1C,OAAOD,QAAQ;IAEf,KAAKjB,mBAAmB;MACpB,IAAIsB,aAAa,GAAG,CAAC,CAAC;MACtBA,aAAa,CAACN,MAAM,CAACX,UAAU,CAACgB,EAAE,CAAC,GAAGL,MAAM,CAACX,UAAU;MACvDY,QAAQ,GAAG;QAAE,GAAGF,KAAK;QAAE,GAAGO;MAAc,CAAC;MAC7C,OAAOL,QAAQ;IAEnB;MACI,OAAOF,KAAK;EACpB;AACJ,CAAC;AAID,eAAeD,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}