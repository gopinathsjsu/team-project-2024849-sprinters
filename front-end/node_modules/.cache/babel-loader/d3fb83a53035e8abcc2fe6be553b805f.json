{"ast":null,"code":"// frontend/src/store/csrf.js\nimport Cookies from 'js-cookie';\nexport async function csrfFetch(url, options = {}) {\n  // set options.method to 'GET' if there is no method\n  options.method = options.method || 'GET';\n  // set options.headers to an empty object if there is no headers\n  options.headers = options.headers || {};\n\n  // if the options.method is not 'GET', then set the \"Content-Type\" header to\n  // \"application/json\", and set the \"XSRF-TOKEN\" header to the value of the\n  // \"XSRF-TOKEN\" cookie\n  if (options.method.toUpperCase() !== 'GET') {\n    options.headers['Content-Type'] = options.headers['Content-Type'] || 'application/json';\n    options.headers['XSRF-Token'] = Cookies.get('XSRF-TOKEN');\n  }\n  // call the default window's fetch with the url and the options passed in\n  const res = await window.fetch(url, options);\n\n  // if the response status code is 400 or above, then throw an error with the\n  // error being the response\n  if (res.status >= 400) throw res;\n\n  // if the response status code is under 400, then return the response to the\n  // next promise chain\n  return res;\n}\n// call this to get the \"XSRF-TOKEN\" cookie, should only be used in development\nexport function restoreCSRF() {\n  return csrfFetch('/api/csrf/restore');\n}","map":{"version":3,"names":["Cookies","csrfFetch","url","options","method","headers","toUpperCase","get","res","window","fetch","status","restoreCSRF"],"sources":["/Users/rohan/Desktop/team-project-2024849-sprinters/front-end/src/store/csrf.js"],"sourcesContent":["// frontend/src/store/csrf.js\nimport Cookies from 'js-cookie';\n\nexport async function csrfFetch(url, options = {}) {\n  // set options.method to 'GET' if there is no method\n  options.method = options.method || 'GET';\n  // set options.headers to an empty object if there is no headers\n  options.headers = options.headers || {};\n\n  // if the options.method is not 'GET', then set the \"Content-Type\" header to\n    // \"application/json\", and set the \"XSRF-TOKEN\" header to the value of the\n    // \"XSRF-TOKEN\" cookie\n  if (options.method.toUpperCase() !== 'GET') {\n    options.headers['Content-Type'] =\n      options.headers['Content-Type'] || 'application/json';\n    options.headers['XSRF-Token'] = Cookies.get('XSRF-TOKEN');\n  }\n  // call the default window's fetch with the url and the options passed in\n  const res = await window.fetch(url, options);\n\n  // if the response status code is 400 or above, then throw an error with the\n    // error being the response\n  if (res.status >= 400) throw res;\n\n  // if the response status code is under 400, then return the response to the\n    // next promise chain\n  return res;\n}\n// call this to get the \"XSRF-TOKEN\" cookie, should only be used in development\nexport function restoreCSRF() {\n    return csrfFetch('/api/csrf/restore');\n}\n"],"mappings":"AAAA;AACA,OAAOA,OAAO,MAAM,WAAW;AAE/B,OAAO,eAAeC,SAASA,CAACC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACjD;EACAA,OAAO,CAACC,MAAM,GAAGD,OAAO,CAACC,MAAM,IAAI,KAAK;EACxC;EACAD,OAAO,CAACE,OAAO,GAAGF,OAAO,CAACE,OAAO,IAAI,CAAC,CAAC;;EAEvC;EACE;EACA;EACF,IAAIF,OAAO,CAACC,MAAM,CAACE,WAAW,CAAC,CAAC,KAAK,KAAK,EAAE;IAC1CH,OAAO,CAACE,OAAO,CAAC,cAAc,CAAC,GAC7BF,OAAO,CAACE,OAAO,CAAC,cAAc,CAAC,IAAI,kBAAkB;IACvDF,OAAO,CAACE,OAAO,CAAC,YAAY,CAAC,GAAGL,OAAO,CAACO,GAAG,CAAC,YAAY,CAAC;EAC3D;EACA;EACA,MAAMC,GAAG,GAAG,MAAMC,MAAM,CAACC,KAAK,CAACR,GAAG,EAAEC,OAAO,CAAC;;EAE5C;EACE;EACF,IAAIK,GAAG,CAACG,MAAM,IAAI,GAAG,EAAE,MAAMH,GAAG;;EAEhC;EACE;EACF,OAAOA,GAAG;AACZ;AACA;AACA,OAAO,SAASI,WAAWA,CAAA,EAAG;EAC1B,OAAOX,SAAS,CAAC,mBAAmB,CAAC;AACzC","ignoreList":[]},"metadata":{},"sourceType":"module"}