{"ast":null,"code":"// frontend/src/store/csrf.js\nimport Cookies from'js-cookie';export async function csrfFetch(url){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};// set options.method to 'GET' if there is no method\noptions.method=options.method||'GET';// set options.headers to an empty object if there is no headers\noptions.headers=options.headers||{};// if the options.method is not 'GET', then set the \"Content-Type\" header to\n// \"application/json\", and set the \"XSRF-TOKEN\" header to the value of the\n// \"XSRF-TOKEN\" cookie\nif(options.method.toUpperCase()!=='GET'){options.headers['Content-Type']=options.headers['Content-Type']||'application/json';options.headers['XSRF-Token']=Cookies.get('XSRF-TOKEN');}// call the default window's fetch with the url and the options passed in\nconst res=await window.fetch(url,options);// if the response status code is 400 or above, then throw an error with the\n// error being the response\nif(res.status>=400)throw res;// if the response status code is under 400, then return the response to the\n// next promise chain\nreturn res;}// call this to get the \"XSRF-TOKEN\" cookie, should only be used in development\nexport function restoreCSRF(){return csrfFetch('/api/csrf/restore');}","map":{"version":3,"names":["Cookies","csrfFetch","url","options","arguments","length","undefined","method","headers","toUpperCase","get","res","window","fetch","status","restoreCSRF"],"sources":["/Users/rohan/Desktop/team-project-2024849-sprinters/front-end/src/store/csrf.js"],"sourcesContent":["// frontend/src/store/csrf.js\nimport Cookies from 'js-cookie';\n\nexport async function csrfFetch(url, options = {}) {\n  // set options.method to 'GET' if there is no method\n  options.method = options.method || 'GET';\n  // set options.headers to an empty object if there is no headers\n  options.headers = options.headers || {};\n\n  // if the options.method is not 'GET', then set the \"Content-Type\" header to\n    // \"application/json\", and set the \"XSRF-TOKEN\" header to the value of the\n    // \"XSRF-TOKEN\" cookie\n  if (options.method.toUpperCase() !== 'GET') {\n    options.headers['Content-Type'] =\n      options.headers['Content-Type'] || 'application/json';\n    options.headers['XSRF-Token'] = Cookies.get('XSRF-TOKEN');\n  }\n  // call the default window's fetch with the url and the options passed in\n  const res = await window.fetch(url, options);\n\n  // if the response status code is 400 or above, then throw an error with the\n    // error being the response\n  if (res.status >= 400) throw res;\n\n  // if the response status code is under 400, then return the response to the\n    // next promise chain\n  return res;\n}\n// call this to get the \"XSRF-TOKEN\" cookie, should only be used in development\nexport function restoreCSRF() {\n    return csrfFetch('/api/csrf/restore');\n}\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,OAAO,KAAM,WAAW,CAE/B,MAAO,eAAe,CAAAC,SAASA,CAACC,GAAG,CAAgB,IAAd,CAAAC,OAAO,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CAC/C;AACAD,OAAO,CAACI,MAAM,CAAGJ,OAAO,CAACI,MAAM,EAAI,KAAK,CACxC;AACAJ,OAAO,CAACK,OAAO,CAAGL,OAAO,CAACK,OAAO,EAAI,CAAC,CAAC,CAEvC;AACE;AACA;AACF,GAAIL,OAAO,CAACI,MAAM,CAACE,WAAW,CAAC,CAAC,GAAK,KAAK,CAAE,CAC1CN,OAAO,CAACK,OAAO,CAAC,cAAc,CAAC,CAC7BL,OAAO,CAACK,OAAO,CAAC,cAAc,CAAC,EAAI,kBAAkB,CACvDL,OAAO,CAACK,OAAO,CAAC,YAAY,CAAC,CAAGR,OAAO,CAACU,GAAG,CAAC,YAAY,CAAC,CAC3D,CACA;AACA,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAC,MAAM,CAACC,KAAK,CAACX,GAAG,CAAEC,OAAO,CAAC,CAE5C;AACE;AACF,GAAIQ,GAAG,CAACG,MAAM,EAAI,GAAG,CAAE,KAAM,CAAAH,GAAG,CAEhC;AACE;AACF,MAAO,CAAAA,GAAG,CACZ,CACA;AACA,MAAO,SAAS,CAAAI,WAAWA,CAAA,CAAG,CAC1B,MAAO,CAAAd,SAAS,CAAC,mBAAmB,CAAC,CACzC","ignoreList":[]},"metadata":{},"sourceType":"module"}