{"ast":null,"code":"import { csrfFetch } from \"./csrf\";\n\n/* ---------------------------- Action Types ----------------------- */\n\nconst LOAD_ALL_SAVED_RESTAURANTS = '/savedRestaurants/LOAD_ALL_SAVED_RESTAURANTS';\nconst ADD_SAVED_RESTAURANT = '/savedRestaurants/ADD_SAVED_RESTAURANT';\nconst REMOVE_SAVED_RESTAURANT = '/savedRestaurants/REMOVE_SAVED_RESTAURANT';\nconst RESET_SAVED_RESTAURANTS = 'savedRestaurants/RESET_SAVED_RESTAURANTS';\n\n/* -------------------------- Action Creators ----------------------- */\n\nconst loadAllSavedRestaurants = restaurants => {\n  return {\n    type: LOAD_ALL_SAVED_RESTAURANTS,\n    savedRestaurants: restaurants\n  };\n};\nconst addSavedRestaurant = restaurant => {\n  return {\n    type: ADD_SAVED_RESTAURANT,\n    savedRestaurant: restaurant\n  };\n};\nconst removeSavedRestaurant = restaurantId => {\n  return {\n    type: REMOVE_SAVED_RESTAURANT,\n    restaurantId: restaurantId\n  };\n};\nexport const resetSavedRestaurants = () => {\n  return {\n    type: RESET_SAVED_RESTAURANTS\n  };\n};\n\n/* ------------------------- Thunk Action Creators ------------------- */\n\nexport const getAllSavedRestaurants = userId => async dispatch => {\n  const response = await csrfFetch(`/api/users/${userId}/saved-restaurants`);\n  if (response.ok) {\n    const restaurants = await response.json();\n    dispatch(loadAllSavedRestaurants(restaurants));\n    return restaurants;\n  }\n};\nexport const createSavedRestaurant = (userId, restaurantId) => async dispatch => {\n  const response = await csrfFetch(`/api/users/${userId}/saved-restaurants/${restaurantId}`, {\n    method: 'POST'\n  });\n  if (response.ok) {\n    const restaurant = await response.json();\n    dispatch(addSavedRestaurant(restaurant));\n    return restaurant;\n  }\n};\nexport const deleteSavedRestaurant = (userId, restaurantId) => async dispatch => {\n  const response = await csrfFetch(`/api/users/${userId}/saved-restaurants/${restaurantId}`, {\n    method: 'DELETE'\n  });\n  if (response.ok) {\n    const message = await response.json();\n    dispatch(removeSavedRestaurant(restaurantId));\n    return message;\n  }\n};\n\n/* ------------------------------- Reducer --------------------------- */\n\nconst initialState = {};\nconst savedRestaurantsReducer = (state = initialState, action) => {\n  let newState = {};\n  switch (action.type) {\n    case LOAD_ALL_SAVED_RESTAURANTS:\n      newState = {\n        ...state\n      };\n      action.savedRestaurants.SavedRestaurants.forEach(restaurant => {\n        newState[restaurant.restaurant_id] = restaurant;\n      });\n      return newState;\n    case ADD_SAVED_RESTAURANT:\n      newState = {\n        ...state\n      };\n      newState[action.savedRestaurant.restaurant_id] = action.savedRestaurant;\n      return newState;\n    case REMOVE_SAVED_RESTAURANT:\n      newState = {\n        ...state\n      };\n      delete newState[action.restaurantId];\n      return newState;\n    case RESET_SAVED_RESTAURANTS:\n      newState = {};\n      return newState;\n    default:\n      return state;\n  }\n};\nexport default savedRestaurantsReducer;","map":{"version":3,"names":["csrfFetch","LOAD_ALL_SAVED_RESTAURANTS","ADD_SAVED_RESTAURANT","REMOVE_SAVED_RESTAURANT","RESET_SAVED_RESTAURANTS","loadAllSavedRestaurants","restaurants","type","savedRestaurants","addSavedRestaurant","restaurant","savedRestaurant","removeSavedRestaurant","restaurantId","resetSavedRestaurants","getAllSavedRestaurants","userId","dispatch","response","ok","json","createSavedRestaurant","method","deleteSavedRestaurant","message","initialState","savedRestaurantsReducer","state","action","newState","SavedRestaurants","forEach","restaurant_id"],"sources":["/Users/akshashe/Documents/Projects/team-project-2024849-sprinters/front-end/src/store/savedRestaurants.js"],"sourcesContent":["import { csrfFetch } from \"./csrf\";\n\n\n/* ---------------------------- Action Types ----------------------- */\n\nconst LOAD_ALL_SAVED_RESTAURANTS = '/savedRestaurants/LOAD_ALL_SAVED_RESTAURANTS'\nconst ADD_SAVED_RESTAURANT = '/savedRestaurants/ADD_SAVED_RESTAURANT'\nconst REMOVE_SAVED_RESTAURANT = '/savedRestaurants/REMOVE_SAVED_RESTAURANT'\nconst RESET_SAVED_RESTAURANTS = 'savedRestaurants/RESET_SAVED_RESTAURANTS'\n\n\n/* -------------------------- Action Creators ----------------------- */\n\nconst loadAllSavedRestaurants = (restaurants) => {\n    return {\n        type: LOAD_ALL_SAVED_RESTAURANTS,\n        savedRestaurants: restaurants\n    }\n}\n\nconst addSavedRestaurant = (restaurant) => {\n    return {\n        type: ADD_SAVED_RESTAURANT,\n        savedRestaurant: restaurant\n    }\n}\n\nconst removeSavedRestaurant = (restaurantId) => {\n    return {\n        type: REMOVE_SAVED_RESTAURANT,\n        restaurantId: restaurantId\n    }\n}\n\nexport const resetSavedRestaurants = () => {\n    return {\n        type: RESET_SAVED_RESTAURANTS\n    }\n}\n\n\n/* ------------------------- Thunk Action Creators ------------------- */\n\nexport const getAllSavedRestaurants = (userId) => async (dispatch) => {\n    const response = await csrfFetch(`/api/users/${userId}/saved-restaurants`);\n\n    if (response.ok) {\n        const restaurants = await response.json();\n        dispatch(loadAllSavedRestaurants(restaurants));\n        return restaurants;\n    }\n}\n\nexport const createSavedRestaurant = (userId, restaurantId) => async (dispatch) => {\n    const response = await csrfFetch(`/api/users/${userId}/saved-restaurants/${restaurantId}`, {\n        method: 'POST'\n    })\n\n    if (response.ok) {\n        const restaurant = await response.json();\n        dispatch(addSavedRestaurant(restaurant));\n        return restaurant;\n    }\n}\n\nexport const deleteSavedRestaurant = (userId, restaurantId) => async (dispatch) => {\n    const response = await csrfFetch(`/api/users/${userId}/saved-restaurants/${restaurantId}`, {\n        method: 'DELETE'\n    })\n\n    if (response.ok) {\n        const message = await response.json();\n        dispatch(removeSavedRestaurant(restaurantId));\n        return message;\n    }\n}\n\n\n/* ------------------------------- Reducer --------------------------- */\n\nconst initialState = {};\n\nconst savedRestaurantsReducer = (state = initialState, action) => {\n    let newState = {};\n\n    switch (action.type) {\n\n        case LOAD_ALL_SAVED_RESTAURANTS:\n            newState = { ...state };\n            action.savedRestaurants.SavedRestaurants.forEach(restaurant => {\n                newState[restaurant.restaurant_id] = restaurant\n            })\n            return newState;\n\n        case ADD_SAVED_RESTAURANT:\n            newState = { ...state };\n            newState[action.savedRestaurant.restaurant_id] = action.savedRestaurant;\n            return newState;\n\n        case REMOVE_SAVED_RESTAURANT:\n            newState = { ...state };\n            delete newState[action.restaurantId];\n            return newState;\n\n        case RESET_SAVED_RESTAURANTS:\n            newState = {};\n            return newState;\n\n        default:\n            return state;\n    }\n}\n\n\nexport default savedRestaurantsReducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}